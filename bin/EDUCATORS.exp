#!/usr/bin/expect

# EDUCATORS.exp
# James Staub
# Nashville Public Library
# Limitless Libraries educator patron load
# Millennium 2014 2.0.0_15
#
# to do: 
#	do not delete error file if error > 0
#	send email if error > 0 ?
#	log rotation
#       either proc or if 0 each section of code so it can be run in pieces. There are some weird braces somewhere...
#	fix duplication of last INSERT record (created 6 of the same patron 20160825)
#	determine whether "overlisting" is an issue, e.g., schoolsIds takes the form {{000000 100 07-31-2016}} {{000001 100 07-31-2016}} etc 
#	change schoolsIds and libraryIds and similar "ID" variable names to describe IDs, full records, tuples, whatever's appropriate
#	overlay: patrons not in mnps data with "correct" EXP date should be given EXP DATE of today that should stick
#	add auto|manual arg
#	eliminate wrongheaded sleep statements, e.g., 
#		expect "$reviewFile > $name"
#		sleep 1
#			should instead be looking for the buffer to get some more stuff in it:
#		expect "$reviewFile > $name*Select review file to work on :"
#	delete or expire/mblock accounts that are no longer in MNPS data - with a max threshhold
#
# 2016082? : Fixed load report regexp should not cause script to die 
# 20160829 : changed load profile m2tab.p @busy = "n" in hopes of producting fewer 6xlast record
# 20160810 : fixes "201417 should not overlay patron 2519201417..."
# 20160729 : fix patron with multiple school records entering Millennium with invalid hold pickup branch
# 20160719 : 
#	move l.~263 problem barcodes to config.pwd.ini
#	move l.~268 valid school codes to config.pwd.ini
# 20151119 : changed INNOPAC load table p @ov_protect to allow overwriting barcode, name, and note fields
#	post to github
# 20151118 : improvements to patron record creation and overlay
#	eliminate duplicate barcode fields from record overlays
#	eliminate duplicate name fields from record overlays
#	insert AUTOMATE INSERT vs AUTOMATED OVERLAY where appropriate
#	eliminate multiple "x MNPS EDUCATOR 000000; AUTOMATED INSERT mm/dd/YY" fields
#	get passwords out of this script
# 20151117 : corrects bugs that create incorrect log entries and halt script
# 20151026 : improvements to sets - what gets added/updated
#	eliminate duplicates from schoolsIds
#	ensure updates get updated
# 20151021 : included logic to test whether RSA key is saved
# 20150930 : included logic to eliminate known problem records from load
# 20150817 : updates for 2015-2016 school year
# 	add to eligible schools
#		Martin Center 
#		Smith Springs
#		Waverly Belmont
#	remove from eligible schools
#		Brick Church
#	review for compatibility with Millennium 2014
#		(like the item sticky status field issue that messed with bib export)
#	educators no longer require activation. Activation used to entail
#		user entry of email/HOLD LIBR in order to remove M BLOCK=r
# 20141111 : added manual argument for manual add list. INSTRUCTIONS:
#	Place data into EDUCATORS-SCHOOLS.txt with fields ? ? ? ? ?
#	$ expect bin/EDUCATORS.exp manual
# 20141110 : added Bordeaux Early Learning Center 152 to eligible schools
# 20140911 : beta : this script :
# 	unzip school file
# 	log into INNOPAC, creates a list of P TYPE 30 patrons, exports the list
# 	scp library data from Millennium server
# 	compare schools and library files to determine which schools records to add
# 	call php script to compose the patron pseudo-MARC file
# 	scp MARC file to Millennium server 
# 	log into INNOPAC, load patron records, create new list of P TYPE 30 patrons
#

exp_internal 1 ; # 1 = verbose debugging to stdout
log_user 1 ; # 1 = send screens to stdout

# determine whether "m" or "manual" was included as an argument
if { [lindex $argv 0] eq "m" || [lindex $argv 0] eq "manual" } then  {
	set manual true
} else {
	set manual false
}

if {$manual eq false} {
	set libraryAddsFileName "EDUCATORS-ADD-[clock format [clock seconds] -format %Y%m%d]"
} else {
	set libraryAddsFileName "EDUCATORS-MANUAL-ADD-[clock format [clock seconds] -format %Y%m%d]"
}

# READ CONFIG.PWD.INI
# VARIABLES SET IN CONF.PWD.INI
set confpwd "/home/limitless/conf.pwd.ini"
if {[file exists $confpwd] != 1} {
        puts "config.pwd.ini not found at $confpwd"
        exit
}
set fd [open $confpwd r]
while {![eof $fd]} {
        set line [string trim [gets $fd] " "]
        if {$line == ""} continue
        switch -regexp -nocase -- $line {
                "^\\[Educator Patron Load\\]" {
                        set section true
                }
                "^\\[" {
                        set section false
                }
		"^#" {
			continue
		}
                "^.+?" {
                        if {$section == true} {
                                set pair [split $line =]
                                set variable [string trim [lindex $pair 0]]
                                set value [string trim [lindex $pair 1]]
                                set $variable $value
                                # puts "$variable  = $value"
                        }
                }
                default {}
        }
}

# LOG FILE : write to it with
# puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> log entry"
set logFilePath "~/data/$name.log"
if { [catch {open $logFilePath "a+"} logFile ] } {
  puts "Error could not open $logFilePath"
}
set logTimeStart [clock seconds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Start $name"

# block for commenting out lots of lines
# N.B.: we cannot place commented right-braces below in the code
# they will be interpreted as the closing brace of this if 0 conditional
#if 0 {

# SCHOOLS: RETRIEVE DATA
# SCHOOLS deliver data to /home/limitless/data
if {$manual eq false} {
	# SCHOOLS: UNZIP
	spawn unzip "$localPath$schoolsFileZip" -d "$localPath"
	expect "password:"
	send "$schoolsPassword\r"
	wait
	close
	file rename -force -- $localPath$schoolsFile $localPath$schoolsFileName
	file delete -force -- [file dirname $localPath$schoolsFile]
}

# insert right brace here for closing if 0 comment block

# CONNECT TO INNOPAC
spawn ssh $INNOPACuser@$host
expect {
        # if RSA key for host is not yet set
        "Are you sure you want to continue connecting (yes/no)?" {
                send "yes\r"
                #expect "login as:"
                send "$INNOPACuser\r"
                expect "Password:"
                send "$INNOPACuserPassword\r"
        }
        "Password:" {
                send "$INNOPACuserPassword\r"
        }
}
expect "What kind of Terminal are you using?"
send "v"
expect "Please confirm: are you using a VT100 or compatible terminal?"
send "y"

# CREATE LIST
expect "M > MANAGEMENT information"
send "M"
expect "L > Create LISTS of records"
send "L"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
# TO DO: FORWARD TO REVIEW FILE PAGE
expect "$reviewFile > $name*Select review file to work on :"
send $reviewFile
expect "N > NEW BOOLEAN search, delete the review file"
send "N"
expect "Are you sure you want to delete the current review file?"
send "Y"
expect "P > PATRON list"
send "P"
expect "05 P TYPE:"
send "05"
expect "Enter boolean condition (=, ~, >, <, G, L, W, N)"
send "="
expect "P TYPE ="
send "030"
expect "Enter action ( A for AND, O for OR, S to START search )"
send "S"
expect "What name would you like to give this file of records?"
send "$name\r"
set timeout -1
expect "BOOLEAN SEARCH COMPLETE"
set timeout $wait
send " "

# CREATE EXPORT FILE
expect "U > Output USER-selected format"
send "U"
expect "C > CREATE a new file for output"
send "C"
expect "Output Item #1 >"
send "b" ; # patron barcode
expect "Output Item #2 >"
send "n" ; # patron name
expect "Output Item #3 >"
send "10" ; # patron HOLD LIBR
expect "Output Item #4 >"
send "01" ; # patron EXP DATE
expect "Output Item #5 >"
send "x" ; # patron NOTE
expect "Output Item #6 >"
send "\r"
expect "1 > Field Delimiter"
send "1"
expect "1 > Control character"
send "1"
expect "Decimal value"
send "009" ; # tab
expect "1 > Field Delimiter......................................................... 9"
expect "2 > Text Qualifier"
send "2"
expect "3 > None"
send "3"
expect "2 > Text Qualifier....................................................... none"
expect "3 > Repeated Field Delimiter"
send "3"
expect "2 > ASCII character"
send "2"
expect "ASCII character"
send "|"
expect "C > CREATE a new file for output"
send "C"
expect "File name:"
send "$name\r"
expect "already exists. Overwrite it?"
send "y"
expect "Output the file now?"
send "n"
close

puts "Sleeping for 10 seconds while Millennium output file writes"
# file needs time to write before grabbing it
sleep 10

# insert right brace here for closing if 0 comment block

# RETRIEVE THE FILE FROM INNOPAC
spawn scp $solarisUser@$host:$solarisPath/$name.out $localPath$name.out
set timeout -1
expect "Password"
send "$solarisUserPassword\r"
expect "100%*\n"
close   
set timeout $wait
#puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> Retrieved file from INNOPAC"

# insert right brace here for closing if 0 comment block

# COMPARE LIBRARY AND SCHOOLS DATA
set schoolsFile [open $localPath$schoolsFileName]
set data [read $schoolsFile]
close $schoolsFile
set schoolsRecords [split $data \n]

#puts "\n\n\nSCHOOLS RECORDS\n\n\n"
#puts $schoolsRecords

# SCHOOL RECORD COLUMNS, HARDCODED
set schoolsID_NUMBER 0
set schoolsFIRST_NAME 1
set schoolsLAST_NAME 2
set schoolsMIDDLE_NAME 3
set schoolsSCHOOL_CODE 8

set reSchoolsSCHOOL_CODE "^(?:\[^\t]*\t)\{$schoolsSCHOOL_CODE}(\[^\t]*)\t"
set reSchoolsID_NUMBER "^(?:\[^\t]*\t)\{$schoolsID_NUMBER}(\[^\t]*)\t"

foreach line $schoolsRecords {
        # eliminate known trouble accounts
        regexp -- $reSchoolsID_NUMBER $line -> schoolsID_NUMBERValue
        set isTroubleAccount [lsearch $troubleAccounts [string trim $schoolsID_NUMBERValue]]
        if {
                $isTroubleAccount > -1
        } then {
                continue
        }
        # accept only accounts at valid schools
        regexp -- $reSchoolsSCHOOL_CODE $line -> schoolsSCHOOL_CODEValue
        set isValidSchool [lsearch $validSchools [string trim $schoolsSCHOOL_CODEValue]]
        if {
                $isValidSchool == -1
        } then {
                #puts "skip $schoolsID_NUMBERValue invalid school $schoolsSCHOOL_CODEValue"
                continue
        } else {
		lappend schoolsRecordsValid $line
                set line "[string trim $schoolsID_NUMBERValue]\t[string trim $schoolsSCHOOL_CODEValue]\t$expDate"
		lappend schoolsIds [list [split $line "\t"]]
        }
}

set schoolsIds [lsort -dictionary -index {0 0} $schoolsIds]
#puts "\n\n\nSCHOOLS IDS\n"
#puts [lindex $schoolsIds 2500] ;
#puts [lindex $schoolsIds end] ; # last ID
#puts [llength $schoolsIds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> SCHOOLS IDS: [llength $schoolsIds]"

set libraryFile [open $localPath$libraryFileName]
set data [read $libraryFile]
close $libraryFile
set libraryRecords [split $data \n]
set libraryIds {}
foreach line $libraryRecords {
	if [
		regsub {(?:^|^.+\|)(\d{6})(?:\|[^\t]*\t|\t)(?:[^\t]+\t)(?:[a-z]{2})([^\t]{3})\t(\d\d-\d\d-\d\d\d\d)\t.*$} $line "\\1\t\\2\t\\3" line
	] then {
		lappend libraryIds [list [split $line "\t"]]
	}
}
set libraryIds [lsort -dictionary -index {0 0} $libraryIds]

#puts "\n\n\nLIBRARY IDS\n"
#puts [lindex $libraryIds 2500] ; # 
#puts [lindex $libraryIds end] ; # last ID
#puts [llength $libraryIds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> LIBRARY IDS: [llength $libraryIds]"

# REMOVE FROM EVALUATION 'CAUSE WE GOT AN ALL-FIELDS MATCH ON AT LEAST ONE SCHOOL RECORD
set schoolsIdsRemove {}
foreach i $libraryIds {
	if {[lsearch -exact $schoolsIds $i]>-1} {
		lappend schoolsIdsRemove [lindex $i {0 0}]
	}
}

#puts "\n\n\nSCHOOLS IDS REMOVE FROM EVALUATION 'CAUSE WE GOT AN ALL-FIELDS MATCH ON AT LEAST ONE SCHOOL RECORD\n"
#puts [lindex $schoolsIdsRemove 2500] ; #
#puts [lindex $schoolsIdsRemove end] ; # last ID
#puts [llength $schoolsIdsRemove]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> SCHOOLS IDS TO REMOVE: [llength $schoolsIdsRemove]"

# REMOVE REMOVABLE SCHOOLS IDS
foreach i $schoolsIdsRemove {
# JAMES: ugly uglly ugly. The leading dot is really to match a brace that's present 'cause I over-listed these lists
	set pattern "^.$i.*?$"
	set schoolsIds [lsearch -all -inline -not -regexp $schoolsIds $pattern]
}

# USE ONLY UNIQUE SCHOOL IDS
set schoolsIds [lsort -dictionary -index {0 0} -unique $schoolsIds]

#puts "\n\n\nSCHOOLS IDS\n"
#puts [lindex $schoolsIds end] ; # last ID
#puts [llength $schoolsIds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> SCHOOLS IDS REMAINING: [llength $schoolsIds]"

set libraryAddIds {}
foreach i $schoolsIds {
	if {[lsearch -exact $libraryIds $i]==-1} {
		lappend libraryAddIds $i
	}
}

#puts "\n\n\nLIBRARY ADD IDS\n"
#puts [lindex $libraryAddIds end] ; # last ID
#puts [llength $libraryAddIds]
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> LIBRARY ADD IDS: [llength $libraryAddIds]"

if {$manual eq false} {
	foreach id $libraryAddIds {
		set patronOverlay ""
		set patronBarcodes {}
		set patronNames {}
		set patronNotes {}
		set id [lindex $id 0 0]
		#puts "looking for $id in schoolsRecordsValid"
		if {
			[lsearch $schoolsRecordsValid $id*]>-1
		} then {
			set patronOverlay "INSERT"
			#puts "found $id in schoolsRecordsValid"
			regexp -- {(^[0-9]{6})\t([^\t]*)\t([^\t]*)\t([^\t]*)\t(?:[^\t]*\t[^\t]*\t[^\t]*\t[^\t]*)\t([0-9a-z]{3})\t.*$} \
			[lindex $schoolsRecordsValid [lsearch $schoolsRecordsValid $id*]] \
			patronFullRecord patronBarcode patronNameFirst patronNameLast patronNameMiddle patronSchoolCode
			lappend patronBarcodes $patronBarcode
			set patronName "[string trim $patronNameLast], [string trim $patronNameFirst]"
			if {
				[string length $patronNameMiddle]>0
			} then {
				append patronNameMiddle " " [string trim $patronNameMiddle]
			}
			lappend patronNames [string toupper $patronName]
			#puts "looking for $id in libraryRecords"
			set re "(^|^\[^\t]+\\|)${id}(\\|\[^\t]*\t|\t)"
			if {
				[lsearch -regexp $libraryRecords $re]>-1
			} then {
				set patronOverlay "OVERLAY"
				#puts "found $id in libraryRecords [lindex $libraryRecords [lsearch -regexp $libraryRecords $re]]"
				regexp -- {(^[^\t]*)\t([^\t]*)\t[^\t]*\t[^\t]*\t([^\t]*)$} \
				[lindex $libraryRecords [lsearch -regexp $libraryRecords $re]] \
				patronFullRecordLibrary patronBarcodesLibrary patronNamesLibrary patronNotesLibrary
				lset patronBarcodesLibrary [split ${patronBarcodesLibrary} |]
				foreach i $patronBarcodesLibrary {
					lappend patronBarcodes [string toupper [string trim $i]]
				}
				lset patronNamesLibrary [split ${patronNamesLibrary} |]
				foreach i $patronNamesLibrary {
					lappend patronNames [string trim $i]
				}
				lset patronNotesLibrary [split ${patronNotesLibrary} |]
				foreach i $patronNotesLibrary {
					if {
						[string equal -nocase -length 20 "MNPS EDUCATOR $id" $i]==0
					} then {
						lappend patronNotes [string trim $i]
					}
				}
			}
			lappend libraryAddRecords "[join [lsort -dictionary -unique $patronBarcodes] |]\t[join [lsort -unique $patronNames] |]\t$patronSchoolCode\t$patronOverlay\t[join [lsort -unique $patronNotes] |]"
		}
	}
} else {
	foreach id $libraryAddIds {
		set id [lindex $id {0 0}]
#		puts "looking for $id in schoolsRecordsValid"
		if {
			[lsearch $schoolsRecordsValid $id*]>-1
		} then {
#			puts "found $id in schoolsRecordsValid"
			lappend libraryAddRecords [ string toupper [ \
				regsub -- {(^[0-9]{6})\t([0-9a-z]{3})\t[^\t]*\t([0-9]{6})\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)$} \
				[lindex $schoolsRecordsValid [lsearch $schoolsRecordsValid $id*]] \
				"\\1,\\6,\\4,\\5,\\2"
			]]
		}
	}
}

#puts "LIBRARY ADD RECORDS"
#puts $libraryAddRecords

if {[info exists libraryAddRecords] == 0} then {
	puts "No new records in SCHOOLS data"
	exit 0
}

set libraryAddsFile [open "$localPath$libraryAddsFileName.csv" w]
foreach libraryAddRecord $libraryAddRecords {
        puts $libraryAddsFile "$libraryAddRecord"
}
close $libraryAddsFile

# insert right brace here for closing if 0 comment block

# php script composes MARC patron file
if {$manual eq false} {
	exec php ./bin/EDUCATORS.php
} else {
	exec php ./bin/EDUCATORS.php manual
}

# insert right brace here for closing if 0 comment block

# PUT THE FILE TO INNOPAC
spawn scp $localPath$libraryAddsFileName.mrc $solarisUser@$host:$libraryAddsFileName.pftp
set timeout -1
expect "Password"
send "$solarisUserPassword\r"
expect "100%*\n"
close   
set timeout $wait

# CONNECT TO INNOPAC
spawn ssh $INNOPACuser@$host
expect {
        # if RSA key for host is not yet set
        "Are you sure you want to continue connecting (yes/no)?" {
                send "yes\r"
                #expect "login as:"
                send "$INNOPACuser\r"
                expect "Password:"
                send "$INNOPACuserPassword\r"
        }
        "Password:" {
                send "$INNOPACuserPassword\r"
        }
}
expect "What kind of Terminal are you using?"
send "v"
expect "Please confirm: are you using a VT100 or compatible terminal?"
send "y"

# INNOPAC LOAD PATRON RECORDS
expect "A > ADDITIONAL system functions"
send "A"
expect "M > Read/write MARC records"
send "M"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "P > Load MARC PATRON records from tape or FTS"
send "P"
expect -re "(\[0-9]+) > $libraryAddsFileName\.pftp"
set expectMatch $expect_out(1,string)
expect "M > PREPROCESS MARC records loaded via FTP"
send "M"
send $expectMatch

# GET THE NUMBER OF RECORDS CONVERTED FROM .PFTP TO .PAT
# NEED TO GET TIMTINGS RIGHT FOR expect STATEMENTS BEFORE UNCOMMENTING
#expect -re "NUMBER OF INPUT RECORDS   - (\[0-9]+?).*\n"
#set pftp $expect_out(1,string)
#expect -re "NUMBER OF OUTPUT RECORDS  - (\[0-9]+?).*\n"
#set pat $expect_out(1,string)
#puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> $pftp pftp records converted to $pat records"

expect "Press <SPACE> to continue"
send " "
expect -re "(\[0-9]+) > $libraryAddsFileName\.pat"
set expectMatch $expect_out(1,string)
expect "C > CONVERT a MARC file"
send "C"
expect "Enter file number"
send $expectMatch

#to place in INNOPAC load-testing mode remove octothorpes from the next three lines
#expect "T > Loading mode"
#send "T"
#expect "T > TESTING mode"
#end testing mode code

expect "L > LOAD records"
send "L"
set timeout -1
expect "Press <SPACE> to continue"
set timeout $wait
send " "
#sleep 10

# LOAD REPORT
expect -re "Number of input records\\s+-\\s(\[0-9]+).+Number of errors\\s+-\\s(\[0-9]+).+PATRON.+?(\[0-9]+)\\s.+?\\s(\[0-9]+)\\s+(\[0-9]+)\\s+(\[0-9]+)(.*?P > PRINT)"

set loadReportInput $expect_out(1,string)
set loadReportErrors $expect_out(2,string)
set loadReportCreated $expect_out(3,string)
set loadReportOverlayed $expect_out(4,string)
set loadReportRejected $expect_out(5,string)
set loadReportRead $expect_out(6,string)
puts $logFile "[clock format [clock seconds] -format "%y%m%d %H:%M:%S"] >> LOAD REPORT: input:$loadReportInput errors:$loadReportErrors created:$loadReportCreated overlayed:$loadReportOverlayed rejected:$loadReportRejected read: $loadReportRead"
unset expect_out

expect "Q > QUIT"
send "Q"
expect "Press <SPACE> to continue"
send " "

# comment out clean up while James figures out a problem 20160914 
if 0 {
# CLEAN UP
# grab file number and name before the options menu renders
expect -re "(\[0-9]+) > $libraryAddsFileName\.pat"

expect "+ > ADDITIONAL options"
send "+"
expect "R > REMOVE files"
send "R"
expect "Input numbers of files to be removed:"
sleep 1
send $expect_out(1,string)
send "\r"
expect "Remove file $libraryAddsFileName\.pat"
send "y"

expect "+ > ADDITIONAL options"
send "+"
expect "R > REMOVE files"
send "R"
expect "Input numbers of files to be removed:"
sleep 1
expect -re "(\[0-9]+) > $libraryAddsFileName\.pftp"
send $expect_out(1,string)
send "\r"
expect "Remove file $libraryAddsFileName\.pftp"
send "y"

expect "+ > ADDITIONAL options"
send "+"
expect "R > REMOVE files"
# .errlog?
# close if 0
}

sleep 1

# GO TO MAINMENU
expect "+ > ADDITIONAL options"
send "+"
expect "Q > QUIT"
send "Q"
expect "Q > QUIT"
send "Q"
expect "Q > QUIT"
send "Q"

# CREATE LIST P TYPE 30 FOR ACTIVATION
expect "M > MANAGEMENT information"
send "M"
expect "L > Create LISTS of records"
send "L"
expect "Please key your initials :"
send "$INNOPACinitials\r"
expect "Please key your password :"
send "$INNOPACinitialsPassword\r"
expect "$reviewFile > $name"
send $reviewFile
expect "N > NEW BOOLEAN search, delete the review file"
send "N"
expect "Are you sure you want to delete the current review file?"
send "Y"
expect "P > PATRON list"
send "P"
expect "05 P TYPE:"
send "05"
expect "Enter boolean condition (=, ~, >, <, G, L, W, N)"
send "="
expect "P TYPE ="
send "030"
expect "Enter action ( A for AND, O for OR, S to START search )"
send "S"
expect "What name would you like to give this file of records?"
send "$name\r"
set timeout -1
expect "BOOLEAN SEARCH COMPLETE"
set timeout $wait
send " "

# insert right brace here for closing if 0 comment block

exit 0
